Version 1
---------

Create a user model and add phpunit testing code

First Commit: 21307a61a699dcc8b9b8beeffa62adce187a6046
Last Commit: 047dce122bf5d1a56cd407b35050303e3799e996

    added user authentication function and password hash functions

protected/config/main.php  -- Added database login credientals. This file is used by the web application
protected/config/console.php  -- Added database login credientals. This file is used whenever you run a migration from the commandline
protected/config/test.php  -- Added database login credientals. This file modifies main.php whenever phpunit is run
protected/migrate_all.sh -- Shell script to migrate main and test db

/var/www/Yii-Tutorial/protected$ ./yiic migrate create create_user_table

Yii Migration Tool v1.0 (based on Yii v1.1.13)

Create new migration '/var/www/Yii-Tutorial/protected/migrations/m130128_204446_create_user_table.php'? (yes|no) [no]:yes
New migration created successfully.


protected/runtime/gii-1.1.13/ModelCode.php -- I think this is a file that should be included in .gitignore.... not sure though
protected/models/User.php -- File generated by Gii. Goto this url 'http://localhost/Yii-Tutorial/index.php?r=gii/model' to generate this. The password is 'password', fill in 'user' for Table name, click preview, then generate.
protected/test/unit/user_model.php -- Added tests to ensure the model checks for password matching. Also added tests to ensure clear text passwords are not stored in the database, and removed from memory after they are saved
protected/test/unit/user_model.php -- Added tests to ensure the hashed password matches the original password when compared
protected/test/unit/user_model.php -- Refactored and corrected errors in the test.

protected/migrations/m130129_000236_increase_user_password_length.php -- Increased the password size to 60. All password hashes are 60 characters
protected/models/User.php -- Added code to verify the password was 60 characters long. This should probably be removed as it may cause problems in the views
												  -- Also added code to turn the password into a hash and a function to compare a password against the hash
protected/extensions/Bcrypt.php -- Code to turn a password into a hash. I found this online and copied it without modification
protected/config/main.php -- Added a line that will search the extension directory for helper classes, this allows us to use the bcrypt class
protected/redo_migrations.sh -- Script file to automate redoing migrations for all databases


Version 2
---------

First commit - commit 66bcc6e999646143f24f9602ecc95c982c2d07e7

Create Administrative Section with User CRUD and ruby acceptance testing. I have tried to work with phpunit for acceptance testing, but it constantly crashes whereas ruby works right out of the box.
Make sure you have ruby installed, preferably with rvm, move into the test directory, and then type 'bundle'. You may need to run 'gem install bundler' first. After that you should have everything installed.
Simply run rspec spec/test_spec.rb from the tests directory to run the tests. The last test is the only one that should fail.

protected/tests/functional/SiteTest.php -- I deleted this as we will not be using phpunit for acceptance testing. This file seems to show how to do this effectively though if you are interested
protected/tests/Gemfile -- This contains a list of dependancies for the ruby code.
protected/tests/Gemfile.lock -- Also contains dependancies. Ignore this file
protected/tests/spec/spec_helper.rb -- Contains code and variables needed for everytest
protected/tests/spec/test_spec.rb -- A basic test that makes sure the application works

protected/runtime/gii-1.1.13/CrudCode.php -- Not sure if this is nessisary. May be a temporary file
protected/controllers/UserController.php -- Runs code before displaying the user views
protected/views/layouts/main.php -- Added a link to the user admin page. This will only display when logged in, but you can still access the page without loggining in
protected/views/user/_form.php -- This page and below are the views for each of the forms for manipulating users
protected/views/user/_search.php
protected/views/user/_view.php
protected/views/user/admin.php
protected/views/user/create.php
protected/views/user/index.php
protected/views/user/update.php
protected/views/user/view.php

protected/views/user/_form.php -- Changed the role to a dropdown list

migrations/m130129_220200_create_user_indices.php -- You cannot delete records by a fields value unless that field is in index. So we needed to create an index for username
migrations/m130129_220748_add_default_admin_user.php -- This created a default user so that we can log in from the database rather then the hard coded login. The new user is 'admin' and password is 'changeme'

protected/tests/Gemfile -- Added mysql to gem dependencies
												-- make sure to run bundle from the test directory. If you run into errors you may need to install a library.
												-- This command works for ubuntu "sudo apt-get install libmysqlclient-dev"
protected/tests/spec/navigation_spec.rb -- Tests to see if the navigation when logged out is as expected
protected/tests/spec/spec_helper.rb -- Moved login finctions from test_spec here, also addded a function to reset the database to the defaults.
protected/tests/spec/user_spec.rb -- Checks to see if users can log in, and what the navigation looks like when logged in. Currently fails. The test expects the login form to use the database which isn't yet implemented.

protected/views/user/_form.php -- Added the second password field to the form, also removed the max password length

protected/tests/bootstrap.php -- Moved generic functions from user_model to here
protected/tests/unit/user_model.php -- see above
protected/tests/unit/user_identity_component.php -- Created a test to verify the form checked the database for user names and passwords rather then static fields

protected/components/UserIdentity.php -- This is the component responsible for sessions. I linked it with the user model for authentication.

protected/migrate_bottom.sh -- Simple script to aid in migration testing. This will revert to the first migration (assuming there is less then 100 migrations)
protected/migrations/m130129_000236_increase_user_password_length.php -- This migration and the ones below have been crashing and were written poorly. They did not run correctly on the test database. I fixed this
protected/migrations/m130129_220200_create_user_indices.php
protected/migrations/m130129_220748_add_default_admin_user.php

protected/migrations/m130130_222233_rename_user_password_column.php -- Renamed password field in user to password_hash. This will remove some confusion
protected/models/User.php -- Update user for column change
protected/tests/spec/spec_helper.rb -- Updated rspecs for column change
protected/views/user/_view.php -- Removed password hash from showing in the view
protected/views/user/view.php -- Same as above

